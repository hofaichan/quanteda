% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/selectFeatures2.R
\name{selectFeatures2}
\alias{selectFeatures2}
\alias{selectFeatures2.tokenizedTexts}
\title{working prototype for faster selectFeatures.tokenizedTexts}
\usage{
selectFeatures2(x, ...)

\method{selectFeatures2}{tokenizedTexts}(x, features, selection = c("keep",
  "remove"), valuetype = c("glob", "regex", "fixed"),
  case_insensitive = TRUE, padding = FALSE, indexing = FALSE,
  verbose = FALSE, ...)
}
\arguments{
\item{x}{object whose features will be selected}

\item{...}{supplementary arguments passed to the underlying functions in 
\code{\link[stringi]{stri_detect_regex}}.  (This is how 
\code{case_insensitive} is passed, but you may wish to pass others.)}

\item{features}{one of: a character vector of features to be selected, a 
\link{dfm} whose features will be used for selection, or a dictionary class
object whose values (not keys) will provide the features to be selected. 
For \link{dfm} objects, see details in the Value section below.}

\item{selection}{whether to keep or remove the features}

\item{valuetype}{how to interpret feature vector: \code{fixed} for words as 
is; \code{"regex"} for regular expressions; or \code{"glob"} for 
"glob"-style wildcard}

\item{case_insensitive}{ignore the case of dictionary values if \code{TRUE}}

\item{padding}{(only for \code{tokenizedTexts} objects) if \code{TRUE}, leave
an empty string where the removed tokens previously existed.  This is
useful if a positional match is needed between the pre- and post-selected
features, for instance if a window of adjacency needs to be computed.}

\item{indexing}{use dfm-based index to efficiently process large tokenizedTexts object}

\item{verbose}{if \code{TRUE} print message about how many features were 
removed}
}
\description{
Calls C++ for super-fast selection or removal of features from a 
set of tokens.
}
\examples{
\dontrun{## performance comparisons
data(SOTUCorpus, package = "quantedaData")
toks <- tokenize(SOTUCorpus, removePunct = TRUE)
toks <- tokenize(tokenize(SOTUCorpus, what='sentence', simplify = TRUE), removePunct = TRUE)
# head to head, old v. new
system.time(selectFeatures2(toks, stopwords("english"), "remove", verbose = FALSE))
system.time(selectFeatures(toks, stopwords("english"), "remove", verbose = FALSE))
system.time(selectFeatures2(toks, c("and", "of"), "remove", verbose = FALSE, valuetype = "regex"))
system.time(selectFeatures(toks, c("and", "of"), "remove", verbose = FALSE, valuetype = "regex"))
microbenchmark::microbenchmark(
    new = selectFeatures2(toks, stopwords("english"), "remove", verbose = FALSE),
    old = selectFeatures(toks, stopwords("english"), "remove", verbose = FALSE),
    times = 5, unit = "relative")
microbenchmark::microbenchmark(
    new = selectFeatures2(toks, c("and", "of"), "remove", verbose = FALSE, valuetype = "regex"),
    old = selectFeatures(toks, c("and", "of"), "remove", verbose = FALSE, valuetype = "regex"),
    times = 2, unit = "relative")
    
types <- unique(unlist(toks))
numbers <- types[stringi::stri_detect_regex(types, '[0-9]')]
microbenchmark::microbenchmark(
    new = selectFeatures2(toks, numbers, "remove", verbose = FALSE, valuetype = "fixed"),
    old = selectFeatures(toks, numbers, "remove", verbose = FALSE, valuetype = "fixed"),
    times = 2, unit = "relative")  
    
# removing tokens before dfm, versus after
microbenchmark::microbenchmark(
    pre = dfm(selectFeatures2(toks, stopwords("english"), "remove"), verbose = FALSE),
    post = dfm(toks, ignoredFeatures = stopwords("english"), verbose = FALSE),
    times = 5, unit = "relative")
}

## with simple examples
toks <- tokenize(c("This is a sentence.", "This is a second sentence."), 
                 removePunct = TRUE)
selectFeatures2(toks, c("is", "a", "this"), selection = "remove", 
                valuetype = "fixed", padding = TRUE, case_insensitive = TRUE)

# how case_insensitive works
selectFeatures2(toks, c("is", "a", "this"), selection = "remove", 
                valuetype = "fixed", padding = TRUE, case_insensitive = FALSE)
selectFeatures2(toks, c("is", "a", "this"), selection = "remove", 
                valuetype = "fixed", padding = TRUE, case_insensitive = TRUE)
selectFeatures2(toks, c("is", "a", "this"), selection = "remove", 
                valuetype = "glob", padding = TRUE, case_insensitive = TRUE)
selectFeatures2(toks, c("is", "a", "this"), selection = "remove", 
                valuetype = "glob", padding = TRUE, case_insensitive = FALSE)

# with longer texts
txts <- c(exampleString, inaugTexts[2])
toks <- tokenize(txts)
selectFeatures2(toks, stopwords("english"), "remove")
selectFeatures2(toks, stopwords("english"), "keep")
selectFeatures2(toks, stopwords("english"), "remove", padding = TRUE)
selectFeatures2(toks, stopwords("english"), "keep", padding = TRUE)
selectFeatures2(tokenize(encodedTexts[1]), stopwords("english"), "remove", padding = TRUE)
}

